//This was me trying to understand the different functions, I might delete this later since I never finished it and its kinda bad

void back_init(){
	/*
	Allocates 512 by 512 by 2 (0.5MB) block of VRAM
	Runs "png_to_texture" which loads "background.png" into VRAM
	*/
}

void font_init(){
	/*
	Allocates 256 by 256 by 2 block of VRAM (Contains a 256 by 256 pixel image and each pixel is stored in 2 bytes)
	Also make a temperary 256 by 128 by 2 block of regular RAM that we initially store the data in
	Reads the wfont.bin file and converts it to a "picture" in the temerary regular RAM
		Characters are 8 wide by 16 high, but are "squashed" when rendered
		16 bytes per character, 1 byte per row (8 bits = byte)
		Each byte is a row of pixels
		Open wfont in a hex editor and convert every 16 bytes to binary form and break up each byte by an EOL
			Then you can "See" the character
		Draws characters in ARGB4444 mode (Alpha,Red,Green,Blue)
		Each of the lines in the for-loop store a single row of a character. Also sets its colour to white (0xffff)
	Then it converts the regular RAM into that vRAM we allocated at the begining
	*/
}

void text_init(){
	/*
	Gets the length of the big text file
	Opens a file stream
	Allocates a char array for it (Not RAM)
	Stores the text file under "Data" and adds a "0" onto the end
	Prints " "length %d\n", length ", dunno why
	*/
}

void draw_back(void){
	/*
	Basically maps the background texture onto a 640 by 480 textured polygon and renders that from 0,0
	*/
}

void draw_char(float x1, float y1, float z1, float a, float r, float g, float b, int c, float xs, float ys){
	/*
	??? It draws the characters ???
	*/
}

void draw_string(float x, float y, float z, float a, float r, float g, float b, char *str, float xs, float ys){
	/*
	char *str is the text file
	??? Does stuff ???
	Keeps drawing characters
		If a "\n" is found then it moves to the next line (Increments y)
		Runs "draw_char(x, y, z, a, r, g, b, *str++, xs, ys)"
		Increments x
	*/
}

int y = 0;
void draw_frame(void){
	/*
	Runs "draw_back()"
	Runs "draw_string(0, y % 1720 + 440, 3, 1, 1, 1, 1, data, 2, 2)"
	y--
	(Also a bunch of pvr stuff throughout this function)
	*/
}


int main(void){
	/*
	Runs "pvr_init_defaults()" which appears to be a KOS function
	Runs "font_init()"
	Runs "back_init()"
	Runs "text_init()"
	While-loop(done == 1)
		MAPLE_FOREACH_BEGIN(MAPLE_FUNC_CONTROLLER, cont_state_t, st)	But what is st?
		If start is pressed, done = 0
		MAPLE_FOREACH_END()
		Draws a frame
	Return 0
	*/
}
