if GetOption('help'):
	print """
	Run 'scons' to build the program (make)
	Run 'scons -c' to remove program files (make clean)
	Optional flags "platform" and "load-method"
	"""
	exit()

import os

env_dreamcast = Environment(CPPPATH = ['.'], CC = 'kos-cc', CCFLAGS = '')
# env_dreamcast = Environment(CPPPATH = ['.'], CC = 'kos-cc', CCFLAGS = os.environ.get('KOS_CFLAGS') + " " + os.environ.get('KOS_LDFLAGS'))
env_dreamcast['ENV']['PATH'] = os.environ['PATH']	#Import PATH for us. This fixes the "Unable to find kos-cc" thing
													#You could just add "ENV = os.environ" to the constructor instead
env_dreamcast['ENV'].update({k: v for k, v in os.environ.items() if k.startswith('KOS_')})	#Adding in KOS vars

TARGET = "vmu_test"										#Executable name
BIN = TARGET + ".bin"									#Binaries
SCRAMBLED = "1st_read.bin"								#Scrambled-file-name
KOS_ROMDISK_DIR = "romdisk_boot"
CFILES = map(str, Glob('*.c'))							#Convert from list to string
OBJS = [os.path.splitext(str(f))[0]+".o" for f in CFILES] + [KOS_ROMDISK_DIR + ".o"]			#Objects

#Insert my variables
env_dreamcast.Replace(LIBS="-lz -lm " + env_dreamcast['ENV']['KOS_LIBS'])
env_dreamcast.Replace(KOS_BASE=env_dreamcast['ENV']['KOS_BASE'])	#First var is env_dreamcast['KOS_BASE']
env_dreamcast.Replace(KOS_GENROMFS=env_dreamcast['ENV']['KOS_GENROMFS'])
env_dreamcast.Replace(PROJ_NAME=TARGET)	#Since the cdi step makes an iso, this is useful

#Create new commands
romdisk = Builder(action=["$KOS_GENROMFS -f romdisk_boot.img -d romdisk_boot",
						"$KOS_BASE/utils/bin2o/bin2o romdisk_boot.img romdisk_boot $TARGET"])

# romdisk = Builder(action="make romdisk_boot.o")
elf = Builder(action="kos-cc -o $TARGET $SOURCES $LIBS")	#SOURCES takes all dependencies and shoves them into one command
kos_bin = Builder(action="sh-elf-objcopy -R .stack -O binary $SOURCE $TARGET")
scramble = Builder(action="$KOS_BASE/utils/scramble/scramble $SOURCE $TARGET")
iso = Builder(action="mkisofs -G $KOS_BASE/../IP.BIN -C 0,11702 -J -l -r -o $TARGET .")
cdi = Builder(action="cdi4dc $SOURCE $TARGET")

#Add the builders
builders = {"Romdisk": romdisk,  "Elf": elf, "KosBin": kos_bin, "Scramble": scramble, "Iso": iso, "Cdi": cdi}
env_dreamcast.Append(BUILDERS=builders)

#Create files and folders
for f in CFILES:#{
	env_dreamcast.Object(os.path.splitext(str(f))[0]+".o", str(f))
#}
rom_build = env_dreamcast.Romdisk(KOS_ROMDISK_DIR + ".o", None)
Clean(rom_build, [KOS_ROMDISK_DIR + ".img"])	#This will clean the files we don't want from the romdisk folder
env_dreamcast.Elf(TARGET + ".elf", OBJS)	#OBJS is a list
env_dreamcast.KosBin(BIN, TARGET + ".elf")
scram_build = env_dreamcast.Scramble(SCRAMBLED, BIN)
iso_build = env_dreamcast.Iso(TARGET + ".iso", None)
cdi_build = env_dreamcast.Cdi(TARGET + ".cdi", TARGET + ".iso")
